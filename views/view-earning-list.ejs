<!DOCTYPE html>
<html>
 <head>
  <title>TradingView - Fetch Earning List</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- jQuery 3.7.0 -->
  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
  <!-- Fontawesome 6.4.2 -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <!-- Bootstrap 5.3.0 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
  <!-- Bootstrap-Table 1.22.1 -->
  <link href="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.css" rel="stylesheet">
  <script src="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.js"></script>
  <script>
    
    /*
        [Back-End API] 
    */
    const getEarning = async({ symbol, url }) => {
        const api_url = `/earning?symbol=${symbol}&url=${url}`;
        
        return new Promise((resolve, reject) => {
            fetch(api_url)
                .then(res => res.json())
                .then(json => resolve(json))
                .catch(err => reject(err));
        });
    }

    const getEarningList = async({ watchlist_url }) => {
        const api_url = `/earning-list?watchlist_url=${watchlist_url}`;
        
        return new Promise((resolve, reject) => {
            fetch(api_url)
                .then(res => res.json())
                .then(json => resolve(json))
                .catch(err => reject(err));
        });
    }

    const getDataIndex = (list = [], target) => {
        let idx = -1;

        for(let i=0; i<list.length; i++)
            if(list[i].symbol === target)
                return i;
        return idx;
    }

    const deleteRowData = (
        symbol, list = JSON.parse(localStorage.getItem("earning_list"))
    ) => {
        if(confirm(`Confirm to delete "${symbol}" from this list?`)){
            const idx = getDataIndex(list, symbol);

            if(idx !== -1){
                list.splice(idx, 1);

                //  update the "earning_list" to local cache
                localStorage.setItem("earning_list", JSON.stringify(list));
                $("#table-earning-list").bootstrapTable("load", convertTableData(list));
            }
        }
    }

    //  base on "next_date" to re-calculate "next_days"
    const updateNextDays = (list = []) => {
        const new_list = list.map(obj => {
            //  next report date
            const d2 = new Date(obj.next_date);
            //  now the date (clear the time)
            const d1 = new Date(new Date().toISOString().substring(0, 10));
            const diff = d2.getTime() - d1.getTime();
            const next_days = diff / 24 / 60 / 60 / 1000;

            return {
                ...obj, 
                next_days
            }
        });
        
        return new_list;
    }

    //  convert the "list" for "bootstrapTable({ data })"
    const convertTableData = (list = []) => {
        let new_list = [...list];

        return new_list.map(item => {
            const { symbol, next_days } = item;
            
            //  if already outdated, highlight to red color
            if(next_days < 0)
                for(const prop in item){
                    if(prop !== "_action")
                        item[prop] = `<span class="text-danger">${item[prop]}</span>`;
                }
            
            //  add the delete button for each row
            item['_action'] = `
                <button class="btn btn-delete d-flex align-items-center m-auto px-4 btn-outline-danger"
                    onClick="deleteRowData('${symbol}')">

                  <i class="fa-solid fa-trash me-2"></i>Delete
                </button>
            `;

            return item;
        });
    }

    const updateProgressBar = ({
        element_id = "progress-bar", 
        current = 0,
        total,
    }) => {
        const percent = current / total;
        const percent_txt = (percent * 100).toFixed(2) + '%';

        $(`#${element_id}`).css("width", percent_txt);
        $(`#${element_id}`).html(percent_txt + ` (${current}/${total}) `);
    }

    const renewOutdate = async(list = []) => {
        try{
            const outdated_list = list.filter(obj => obj.next_days < 0); 
            const total_update = outdated_list.length;
            const confirm_msg = `"${outdated_list.map(obj => obj.symbol).join(", ")}" stock data already outdated, update now?`;
            let updated = 0;

            if(total_update && confirm(confirm_msg)){
                $("#progress-container").removeClass("d-none");
                $("#btn-fetch").attr("disabled", "");

                for(let i=0; i<list.length; i++){
                    const { symbol, url, next_days } = list[i];

                    if(next_days < 0){
                        const msg = `Updating: "${symbol}"`;

                        console.log(msg);
                        //  show the progress info
                        $("#progress-status").html(msg);
                        updateProgressBar({
                            current: updated, 
                            total: total_update
                        });

                        const json = await getEarning({ symbol, url });
                        list[i] = json;

                        updated++;

                        //  update progress info
                        updateProgressBar({
                            current: updated, 
                            total: total_update
                        });
                    }
                }
                
                $("#btn-fetch").removeAttr("disabled");
            }

            if(total_update !== 0 && updated === total_update){
                const msg = `Updated all the data`;

                alert(msg);
                $("#progress-status").html(msg);

                updateProgressBar({
                    current: updated, 
                    total: total_update
                });
            }

            return list;
        }catch(err){
            console.error(err);
            console.log(`Fail to request "/earning".`);

            return list;
        }
    }
    
    const fetchBySymbol = async({ list, symbol, url }) => {
        try{
            //  show the progress info
            const msg = `Fetching: "${symbol}"`;
            $("#progress-container").removeClass("d-none");
            $("#progress-status").html(msg);
            console.log(msg);
            updateProgressBar({ total: 1 });

            const json = await getEarning({ symbol, url });
            const idx = getDataIndex(list, symbol);
            
            //  add (this symbol stock not exist)
            if(idx === -1)
                list.push(json);
            //  update (this symbol stock exist)
            else
                list[idx] = json;
            
            //  update progress info
            updateProgressBar({ current: 1, total: 1 });

            return list;
        }catch(err){
            console.error(err);
            console.log(`Fail to request "/earning".`);

            return list;
        }
    }

    const fetchByWatchlist = async(watchlist_url) => {
        getEarningList({ watchlist_url }).then(async data_list => {
            let earning_list = [...data_list];
            let fetched = 0;

            localStorage.setItem("earning_list", JSON.stringify(data_list));
            $("#table-earning-list").bootstrapTable("load", convertTableData(data_list));
            
            $("#progress-container").removeClass("d-none");
            console.log(`[${new Date().toISOString()}] Start Fetch Individual Earning Date.`);
            for(let i=0; i<earning_list.length; i++){
                const { symbol, url } = earning_list[i];

                try{
                    //  show the progress info
                    const msg = `Fetching: "${symbol}"`;
                    $("#progress-status").html(msg);
                    console.log(msg);
                    updateProgressBar({ 
                        current: i, 
                        total: earning_list.length 
                    });

                    const json = await getEarning({ symbol, url });
                    const idx = getDataIndex(earning_list, json.symbol);
                    
                    if(idx !== -1){
                        if(json.is_stock)
                            earning_list[idx] = json;
                        else{
                            earning_list.splice(idx, 1);
                            i--;
                        }

                        //  update the "earning_list" to local cache
                        localStorage.setItem("earning_list", JSON.stringify(earning_list));
                    }
                    
                    updateProgressBar({ 
                        current: i + 1, 
                        total: earning_list.length 
                    });
                    $("#table-earning-list").bootstrapTable("load", convertTableData(earning_list));
                }catch(error){
                    const err_msg = `[getEarning] Fail to fetch "${symbol}"\n(${url})`;

                    console.error(error);
                    console.log(err_msg);

                    alert(err_msg);

                    return earning_list;
                }
            }
            console.log(`[${new Date().toISOString()}] End Fetch Individual Earning Date.`);

            return earning_list;
        })
        .catch(err => {
            console.error(err);
            
            alert(`Fail to request API.`);
            return [];
        });
    }

    $(() => {
        let earning_list = JSON.parse(localStorage.getItem("earning_list") || "[]");
        let is_initial = false;
        let fetch_mode = "watchlist";
        
        earning_list = updateNextDays(earning_list);
        earning_list.sort((a, b) => a.next_days - b.next_days);
        //  update to cache (localStorage)
        localStorage.setItem("earning_list", JSON.stringify(earning_list));

        let list2 = JSON.parse(localStorage.getItem("earning_list") || "[]");
        renewOutdate(list2).then(result_list => {
            earning_list = [...result_list];
            earning_list.sort((a, b) => a.next_days - b.next_days);
            localStorage.setItem("earning_list", JSON.stringify(earning_list));

            $(`#table-earning-list`).bootstrapTable("load", convertTableData(earning_list));
        });
        
        $(`#table-earning-list`).bootstrapTable({ data: 
            convertTableData([...earning_list])
        });

        $("#btn-fetch").bind("click", () => {
            const watchlist_url = $("#watchlist-url").val();
            
            if(watchlist_url){
                if(fetch_mode === "watchlist"){
                    const is_action = confirm(`Confirm re-fetch all data?`);
            
                    if(!is_action) return;

                    $("#btn-fetch").attr("disabled", "");

                    fetchByWatchlist(watchlist_url).then(result_list => {
                        //  update exist list
                        earning_list = [...result_list];
                        earning_list.sort((a, b) => a.next_days - b.next_days);
                        localStorage.setItem("earning_list", JSON.stringify(earning_list));

                        $(`#table-earning-list`).bootstrapTable("load", convertTableData(earning_list));
                        $("#btn-fetch").removeAttr("disabled");
                    });
                }
                else if(fetch_mode === "symbol"){
                    $("#btn-fetch").attr("disabled", "");
                    const url = $("#symbol-url").val();
                    //  index of symbol
                    const idx = url.lastIndexOf('-');
                    const symbol = (idx !== -1)? 
                        url.substring(idx + 1).replace(/\//g, ""): 
                        "";
                    
                    fetchBySymbol({
                        list: earning_list, 
                        symbol, 
                        url, 
                    }).then(result_list => {
                        //  update exist list
                        earning_list = [...result_list];
                        earning_list.sort((a, b) => a.next_days - b.next_days);
                        localStorage.setItem("earning_list", JSON.stringify(earning_list));
                        
                        $(`#table-earning-list`).bootstrapTable("load", convertTableData(earning_list));
                        $("#btn-fetch").removeAttr("disabled");
                    });
                }
            }
            else
                alert(`Please input a "TradingView - Watchlist Url".`);
        });
    
        $("#switch-mode").bind("change", () => {
            const is_watchlist = document.querySelector("#switch-mode").checked;
            const mode = (is_watchlist)? "Watchlist": "Symbol";
            fetch_mode = (is_watchlist)? "watchlist": "symbol";
            
            if(mode === "Watchlist"){
                $("#symbol-url").parent().parent().addClass("d-none");
                $("#watchlist-url").parent().parent().removeClass("d-none");

                $("#switch-mode-label").html(`Watchlist Url`);
            }
            else if(mode === "Symbol"){
                $("#symbol-url").parent().parent().removeClass("d-none");
                $("#watchlist-url").parent().parent().addClass("d-none");
                
                $("#switch-mode-label").html(`Symbol Url`);
            }
        });
    });

  </script>
 </head>
 <body class="text-light bg-dark">
  
  <!-- Container: Main -->
  <div class="container-xxl">
   <div class="row mt-5">
    <div class="col d-flex align-items-center justify-content-center form-check form-switch">
     <input class="form-check-input" id="switch-mode" checked 
        type="checkbox" role="switch" />
     <label class="form-check-label ms-2" id="switch-mode-label" for="switch-mode">
      Watchlist Url
     </label>
    </div>
   </div>

   <div class="row">
    <!-- Input: Symbol Url -->
    <div class="col d-none">
     <div class="form-floating m-auto mt-2 w-50 text-dark">
      <input id="symbol-url" type="url" class="form-control" 
        placeholder="Symbol Url" />
      <label for="symbol-url" class="ms-2">
       <i class="fa-solid fa-link me-2"></i>Symbol Url
      </label>
     </div>
    </div>
    <!-- End of Input: Symbol Url -->

    <!-- Input: Watchlist Url -->
    <div class="col">
     <div class="form-floating m-auto mt-2 w-50 text-dark">
      <input id="watchlist-url" type="url" class="form-control" 
        value="https://www.tradingview.com/watchlists/85999770/" placeholder="Watchlist Url" />
      <label for="watchlist-url" class="ms-2">
       <i class="fa-solid fa-link me-2"></i>Watchlist Url
      </label>
     </div>
    </div>
    <!-- End of Input: Watchlist Url -->
   </div>

   <button id="btn-fetch" class="btn d-flex align-items-center m-auto mt-5 px-5 btn-outline-success">
    <i class="fa-solid fa-cloud-arrow-down me-2"></i>Fetch
   </button>
   
   <div id="progress-container" class="row d-none my-3">
    <!-- Progress Bar -->
    <div class="col-12">

     <div class="progress" role="progressbar" aria-label="Update Progress" 
        aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
      <div id="progress-bar" class="progress-bar bg-success progress-bar-striped progress-bar-animated">
       0%
      </div>
     </div>
    </div>
    <!-- Progress Status -->
    <div id="progress-status" class="col-lg-auto"></div>
   </div>

   <hr class="my-4" />

   <!-- Table: Earning List -->
   <table id="table-earning-list" class="table table-primary table-striped" 
        data-search="true"
        data-search-align="left"
        data-search-highlight="true"

        data-show-columns="true"
        data-show-columns-toggle-all="true"

        data-pagination="true"
        data-page-list="[10, 25, 50, 100, all]"
        data-page-size="100">
    <thead>
     <tr>
      <th data-field="symbol" data-sortable="true">
       <i class="fa-solid fa-money-bill me-2"></i>Symbol
      </th>
      <th data-field="url" data-sortable="true" data-visible="false">
       <i class="fa-solid fa-link me-2"></i>Url
      </th>
      <th data-field="next_days" data-sortable="true">
       <i class="fa-solid fa-calendar-check me-2"></i>Next Days
      </th>
      <th data-field="next_date" data-sortable="true">
       <i class="fa-solid fa-calendar-days me-2"></i>Next Date
      </th> 
      <th data-field="_action">
       <i class="fa-solid me-2 fa-bullseye"></i>Action
      </th>
     </tr>
    </thead>
   </table>
   <!-- End of Table: Earning List -->
  </div>
  <!-- End of Container: Main -->
  
 </body>
</html>